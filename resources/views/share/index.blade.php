@extends('layouts.share')

@section('style')
    <link rel="stylesheet" href="{{asset('libs/editormd/css/editormd.min.css')}}">
    <link rel="stylesheet" href="{{asset('module/share/css/index.css')}}">
@endsection

@section('content')
    <div class="note-wrap">
        <div class="note-title">HTML5 进阶系列：web Storage.md</div>
        <div class="note-content"></div>
        <div class="doc-preview-body markdown-body  editormd-preview-container"><h1 id="h1--fis3-"><a name="利用fis3构建前端项目工程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>利用fis3构建前端项目工程</h1><div class="markdown-toc editormd-markdown-toc"><ul class="markdown-toc-list"><li><a class="toc-level-1" href="#利用fis3构建前端项目工程" level="1">利用fis3构建前端项目工程</a><ul><li><a class="toc-level-2" href="#1.安装node.js和npm" level="2">1.安装node.js和npm</a></li><li><a class="toc-level-2" href="#2.安装fix3" level="2">2.安装fix3</a></li><li><a class="toc-level-2" href="#3.配置命令" level="2">3.配置命令</a><ul></ul></li></ul></li></ul></div><p>FIS3是国内百度公司产出的一款前端工程构建工具，FIS3可以解决前端工程中性能优化、资源加载（异步、同步、按需、预加载、依赖管理、合并、内嵌）、模块化开发、自动化工具、开发规范、代码部署等问题，首先来简单的实现资源合并压缩提高性能等问题。</p>
            <h2 id="h2-1-node-js-npm"><a name="1.安装node.js和npm" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1.安装node.js和npm</h2><p>详细过程参考官网 <a href="https://nodejs.org">https://nodejs.org</a><br>新版已经集成npm，安装node即可<br>查看是否安装node</p>
            <pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">node </span><span class="pun">-</span><span class="pln">v</span></code></li></ol></pre><p>查看是否安装 </p>
            <pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">npm </span><span class="pun">-</span><span class="pln">v</span></code></li></ol></pre><p>如果有安装会显示具体版本号<br>比如:</p>
            <pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">C</span><span class="pun">:</span><span class="pln">user\admin\node </span><span class="pun">-</span><span class="pln">v</span></code></li><li class="L1"><code><span class="pln">v</span><span class="pun">.</span><span class="lit">6.5</span><span class="pun">.</span><span class="lit">0</span></code></li></ol></pre><h2 id="h2-2-fix3"><a name="2.安装fix3" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2.安装fix3</h2><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">npm install </span><span class="pun">-</span><span class="pln">g fis3</span></code></li></ol></pre><h2 id="h2-3-"><a name="3.配置命令" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3.配置命令</h2><ul>
                <li><p>添加时间戳，解决缓存。</p>
                    <pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pln">fis</span><span class="pun">.</span><span class="pln">match</span><span class="pun">(</span><span class="str">'*.{js,css,png}'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code><span class="pln">  useHash</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span></code></li><li class="L2"><code><span class="pun">});</span></code></li></ol></pre></li><li><p>启用 fis-spriter-csssprites 插件，给匹配到的文件分配属性 <code>useSprite</code><br>```<br>fis.match(‘::package’, {<br>spriter: fis.plugin(‘csssprites’)<br>})</p>
                </li></ul>
            <p>fis.match(‘*.css’, {<br>  useSprite: true<br>});</p>
            <p>FIS3 构建会对 CSS 中，路径带 ?<strong>sprite 的图片进行合并。为了节省编译的时间，分配到 useSprite: true 的 CSS 文件才会被处理。<br>.first_icon::before {<br>    background: url(“../img/first_icon.png?</strong>sprite”);<br>}</p>
            <p>.second_icon::before {<br>    background: url(“../img/second_icon.png?__sprite”);<br>}</p>
            <pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pun">-</span><span class="pln"> </span><span class="pun">图片压缩</span><span class="pln"> fis</span><span class="pun">-</span><span class="pln">optimizer</span><span class="pun">-</span><span class="pln">png</span><span class="pun">-</span><span class="pln">compressor </span><span class="pun">插件进行压缩，已内置</span></code></li></ol></pre><p>fis.match(‘*.png’, {<br>    optimizer: fis.plugin(‘png-compressor’)<br>});</p>
            <pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code></code></li><li class="L1"><code><span class="pun">-</span><span class="pln"> </span><span class="pun">对</span><span class="pln">css</span><span class="pun">压缩，</span><span class="pln">fis</span><span class="pun">-</span><span class="pln">optimizer</span><span class="pun">-</span><span class="pln">clean</span><span class="pun">-</span><span class="pln">css </span><span class="pun">插件进行压缩，已内置</span></code></li></ol></pre><p>fis.match(‘*.css’, {<br>    optimizer: fis.plugin(‘clean-css’)<br>});</p>
            <pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code></code></li><li class="L1"><code><span class="pun">-</span><span class="pln"> </span><span class="pun">对</span><span class="pln">js</span><span class="pun">压缩，利用</span><span class="pln">fis</span><span class="pun">-</span><span class="pln">optimizer</span><span class="pun">-</span><span class="pln">uglify</span><span class="pun">-</span><span class="pln">js </span><span class="pun">插件进行压缩，已内置</span></code></li></ol></pre><p>fis.match(‘*.js’, {<br>    optimizer: fis.plugin(‘uglify-js’)<br>});</p>
            <pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code></code></li><li class="L1"><code><span class="pun">-</span><span class="pln"> </span><span class="pun">启用</span><span class="pln">fis3</span><span class="pun">-</span><span class="pln">hook</span><span class="pun">-</span><span class="pln">relative</span><span class="pun">插件，并让所有文件支持相对路径</span></code></li></ol></pre><p>fis.hook(‘relative’);</p>
            <p>fis.match(‘**’, {<br>    relative: true<br>});</p>
            <pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code></code></li><li class="L1"><code><span class="pun">-</span><span class="pln"> </span><span class="pun">对多个页面，散列文件进行合并，需安装</span><span class="pln"> fis3</span><span class="pun">-</span><span class="pln">postpackager</span><span class="pun">-</span><span class="pln">loader</span></code></li></ol></pre><p>fis.match(‘::packager’, {<br>    postpackager: fis.plugin(‘loader’, {<br>        allInOne: true<br>    })<br>});</p>
            <pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pun">-</span><span class="pln"> </span><span class="pun">指定构建存放路径</span></code></li></ol></pre><p>fis.match(‘*.{png,js,css}’, {<br>    release: ‘/static/$0’<br>});</p>
            <pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code></code></li><li class="L1"><code><span class="com">## 4.开始构建项目</span></code></li><li class="L2"><code><span class="pun">(</span><span class="lit">1</span><span class="pun">)在项目目录里新建一个配置文件</span><span class="pln">fis</span><span class="pun">-</span><span class="pln">conf</span><span class="pun">.</span><span class="pln">js</span></code></li><li class="L3"><code><span class="pun">配置如下：</span></code></li></ol></pre><p>//启用fis3-hook-relative插件<br>fis.hook(‘relative’);</p>
            <p>//让所有文件，都使用相对路径<br>fis.match(‘**’, {<br>    relative: true<br>});</p>
            <p>// 加md5戳<br>fis.match(‘*.{js,css,png}’, {<br>    useHash: true<br>});</p>
            <p>//启用 fis-spriter-csssprites 插件<br>fis.match(‘::package’, {<br>    spriter: fis.plugin(‘csssprites’)<br>});</p>
            <p>//对CSS进行图片合并 给匹配到的文件分配属性 <code>useSprite</code><br>fis.match(‘*.css’, {<br>    useSprite: true<br>});</p>
            <p>//图片压缩 fis-optimizer-png-compressor 插件进行压缩，已内置<br>fis.match(‘*.png’, {<br>    optimizer: fis.plugin(‘png-compressor’)<br>});</p>
            <p>//js压缩 fis-optimizer-uglify-js 插件进行压缩，已内置<br>fis.match(‘*.js’, {<br>    optimizer: fis.plugin(‘uglify-js’)<br>});</p>
            <p>//css压缩 fis-optimizer-clean-css 插件进行压缩，已内置<br>fis.match(‘*.css’, {<br>    optimizer: fis.plugin(‘clean-css’)<br>});</p>
            <p>//可对页面散列文件进行合并，需安装 fis3-postpackager-loader<br>fis.match(‘::packager’, {<br>    postpackager: fis.plugin(‘loader’, {<br>        allInOne: true<br>    })<br>});</p>
            <p>//配置文件指定路径位置<br>fis.match(‘*.{png,js,css}’, {<br>    release: ‘/static/$0’<br>});</p>
            <pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pun">(</span><span class="lit">2</span><span class="pun">)开始构建</span></code></li><li class="L1"><code><span class="pun">进入项目根目录，执行命令，进行构建。</span></code></li><li class="L2"><code><span class="pun">构建发布到项目目录的</span><span class="pln">dist</span><span class="pun">目录下</span></code></li></ol></pre><p>fis3 release -d ./dist</p>
            <pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pun">构建发布到项目父级目录的</span><span class="pln">dist</span><span class="pun">子目录下</span></code></li></ol></pre><p>fis3 release -d ../dist</p>
            <pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="pun">发布到其他盘（</span><span class="typ">Windows</span><span class="pun">）</span></code></li></ol></pre><p>fis3 release -d F:\dist<br>```</p>
            <p>遇到的问题：</p>
            <p>参考网址：<br><a href="http://fis.baidu.com/">http://fis.baidu.com/</a></p></div>
    </div>
@endsection
